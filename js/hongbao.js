/*
【题目】

模仿微信红包的金额分配算法：给定总金额和红包数量，计算出每个红包的金额，要求相对均匀，避免
出现极端的分配情况（出现显著巨大的红包）。

【数学模型】

用一条线段代表总金额 A，现在要把它切分成“尽量均匀”的 N 段，也就是要插入 N-1 个断点。可以
采用循环处理的方式，每次插入一个断点。为了尽量均匀，每次插入断点时都选择现有线段中最长的那
条来切分。

【数据结构和算法】

用一个数组保存所有已经切分好的金额（初始的时候就只有一个总额），每次从里面选出最大的一个值，
拆分成两个值再放回数组，循环 N-1 次即可。

【遗留问题】

从实际运行结果看，这个算法太均匀了，不像微信红包的差异那么明显。
*/

function run(a, n)
{
	// 参数合法性检查
	if (n < 1 || a < n) {
		console.log('invalide number: ', a, n);
		return;
	}

	// 红包金额池
	var pool = [a];

	// 循环切割 N-1 次
	for (var i=0; i < n - 1; i++) {
		// 取出第一个（最大的）金额值
		var x = pool.shift();

		// 切割成两个值，放回池子中
		var x1 = Math.floor((x - 1) * Math.random()) + 1;
		pool.push(x1, x - x1);

		// 排序（从大到小）
		pool.sort(function(p1, p2) {
			return p2 - p1;
		});

		// 输出当前结果
		console.log(pool);
	}
	return pool;
}

// 50 元，分成 20 个红包
run(5000, 20);
